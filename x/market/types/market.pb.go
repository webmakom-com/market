// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/market.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderStatus int32

type OrdersType []Order
type AccountsType []Account
type MarketsType []Market

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0
	OrderStatus_ORDER_TYPE_OPEN          OrderStatus = 1
	OrderStatus_ORDER_TYPE_CLOSE         OrderStatus = 2
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_TYPE_OPEN",
	2: "ORDER_TYPE_CLOSE",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED": 0,
	"ORDER_TYPE_OPEN":          1,
	"ORDER_TYPE_CLOSE":         2,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{0}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	OrderType_ORDER_TYPE_LIMIT       OrderType = 1
	OrderType_ORDER_TYPE_STOP        OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "ORDER_TYPE_UNSPECIFIED",
	1: "ORDER_TYPE_LIMIT",
	2: "ORDER_TYPE_STOP",
}

var OrderType_value = map[string]int32{
	"ORDER_TYPE_UNSPECIFIED": 0,
	"ORDER_TYPE_LIMIT":       1,
	"ORDER_TYPE_STOP":        2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{1}
}

type Market struct {
	InternalId   string  `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	CoinA        string  `protobuf:"bytes,2,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinB        string  `protobuf:"bytes,3,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	ExchangeRate float64 `protobuf:"fixed64,4,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	CrTime       int64   `protobuf:"varint,5,opt,name=cr_time,json=crTime,proto3" json:"cr_time,omitempty"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{0}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *Market) GetCoinA() string {
	if m != nil {
		return m.CoinA
	}
	return ""
}

func (m *Market) GetCoinB() string {
	if m != nil {
		return m.CoinB
	}
	return ""
}

func (m *Market) GetExchangeRate() float64 {
	if m != nil {
		return m.ExchangeRate
	}
	return 0
}

func (m *Market) GetCrTime() int64 {
	if m != nil {
		return m.CrTime
	}
	return 0
}

type Account struct {
	InternalId string             `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	Balance    map[string]float64 `protobuf:"bytes,2,rep,name=balance,proto3" json:"balance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	CrTime     int64              `protobuf:"varint,3,opt,name=cr_time,json=crTime,proto3" json:"cr_time,omitempty"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *Account) GetBalance() map[string]float64 {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *Account) GetCrTime() int64 {
	if m != nil {
		return m.CrTime
	}
	return 0
}

type Order struct {
	InternalId   string      `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	AccountId    string      `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BidCoin      string      `protobuf:"bytes,3,opt,name=bid_coin,json=bidCoin,proto3" json:"bid_coin,omitempty"`
	AskCoin      string      `protobuf:"bytes,4,opt,name=ask_coin,json=askCoin,proto3" json:"ask_coin,omitempty"`
	Amount       float64     `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	ExchangeRate float64     `protobuf:"fixed64,6,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	Status       OrderStatus `protobuf:"varint,7,opt,name=status,proto3,enum=onomyprotocol.market.market.OrderStatus" json:"status,omitempty"`
	CrTime       int64       `protobuf:"varint,8,opt,name=cr_time,json=crTime,proto3" json:"cr_time,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{2}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *Order) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Order) GetBidCoin() string {
	if m != nil {
		return m.BidCoin
	}
	return ""
}

func (m *Order) GetAskCoin() string {
	if m != nil {
		return m.AskCoin
	}
	return ""
}

func (m *Order) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetExchangeRate() float64 {
	if m != nil {
		return m.ExchangeRate
	}
	return 0
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (m *Order) GetCrTime() int64 {
	if m != nil {
		return m.CrTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("onomyprotocol.market.market.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("onomyprotocol.market.market.OrderType", OrderType_name, OrderType_value)
	proto.RegisterType((*Market)(nil), "onomyprotocol.market.market.Market")
	proto.RegisterType((*Account)(nil), "onomyprotocol.market.market.Account")
	proto.RegisterMapType((map[string]float64)(nil), "onomyprotocol.market.market.Account.BalanceEntry")
	proto.RegisterType((*Order)(nil), "onomyprotocol.market.market.Order")
}

func init() { proto.RegisterFile("market/market.proto", fileDescriptor_0d04b58e21264476) }

var fileDescriptor_0d04b58e21264476 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x3a, 0x8d, 0xd3, 0x4c, 0x0a, 0x58, 0xdb, 0x52, 0x4c, 0x00, 0x37, 0x0a, 0x17, 0xab,
	0x07, 0x47, 0x94, 0x0b, 0xea, 0x89, 0x24, 0x35, 0xc2, 0xa2, 0x6d, 0x22, 0xdb, 0x45, 0x82, 0x8b,
	0xb5, 0xb6, 0x97, 0xd4, 0x4a, 0x6c, 0x47, 0xf6, 0x06, 0x35, 0x7f, 0xc1, 0xa5, 0xff, 0xc4, 0x81,
	0x43, 0x8f, 0x1c, 0x51, 0xf2, 0x23, 0xc8, 0x6b, 0x07, 0x1c, 0x40, 0xa5, 0xa7, 0x9d, 0x79, 0x6f,
	0xe6, 0xf9, 0xed, 0x5b, 0x19, 0x76, 0x43, 0x92, 0x4c, 0x28, 0xeb, 0xe6, 0x87, 0x36, 0x4b, 0x62,
	0x16, 0xe3, 0x27, 0x71, 0x14, 0x87, 0x0b, 0x5e, 0x7b, 0xf1, 0x54, 0x2b, 0xb8, 0xfc, 0x68, 0x1d,
	0x8c, 0xe3, 0x78, 0x3c, 0xa5, 0x5d, 0x4e, 0xbb, 0xf3, 0x4f, 0x5d, 0x16, 0x84, 0x34, 0x65, 0x24,
	0x9c, 0xe5, 0xdb, 0x9d, 0x6b, 0x04, 0xe2, 0x19, 0x9f, 0xc5, 0x07, 0xd0, 0x0c, 0x22, 0x46, 0x93,
	0x88, 0x4c, 0x9d, 0xc0, 0x97, 0x51, 0x1b, 0xa9, 0x0d, 0x13, 0xd6, 0x90, 0xe1, 0xe3, 0x87, 0x20,
	0x7a, 0x71, 0x10, 0x39, 0x44, 0x16, 0x38, 0x57, 0xcb, 0xba, 0xde, 0x2f, 0xd8, 0x95, 0xab, 0xbf,
	0xe1, 0x3e, 0x7e, 0x0e, 0xf7, 0xe8, 0x95, 0x77, 0x49, 0xa2, 0x31, 0x75, 0x12, 0xc2, 0xa8, 0xbc,
	0xd5, 0x46, 0x2a, 0x32, 0x77, 0xd6, 0xa0, 0x49, 0x18, 0xc5, 0x8f, 0xa0, 0xee, 0x25, 0x4e, 0x66,
	0x4a, 0xae, 0xb5, 0x91, 0x5a, 0x35, 0x45, 0x2f, 0xb1, 0x83, 0x90, 0x76, 0xbe, 0x21, 0xa8, 0xf7,
	0x3c, 0x2f, 0x9e, 0x47, 0x77, 0x30, 0xf6, 0x0e, 0xea, 0x2e, 0x99, 0x92, 0xc8, 0xa3, 0xb2, 0xd0,
	0xae, 0xaa, 0xcd, 0xa3, 0x17, 0xda, 0x2d, 0xa1, 0x68, 0x85, 0xae, 0xd6, 0xcf, 0x77, 0xf4, 0x88,
	0x25, 0x0b, 0x73, 0xad, 0x50, 0xb6, 0x54, 0x2d, 0x5b, 0x6a, 0x1d, 0xc3, 0x4e, 0x79, 0x03, 0x4b,
	0x50, 0x9d, 0xd0, 0x45, 0x61, 0x27, 0x2b, 0xf1, 0x1e, 0xd4, 0x3e, 0x93, 0xe9, 0x9c, 0xf2, 0x7c,
	0x90, 0x99, 0x37, 0xc7, 0xc2, 0x2b, 0xd4, 0xb9, 0x16, 0xa0, 0x36, 0x4c, 0x7c, 0x9a, 0xfc, 0xff,
	0x32, 0xcf, 0x00, 0x48, 0x6e, 0x30, 0xe3, 0xf3, 0xa4, 0x1b, 0x05, 0x62, 0xf8, 0xf8, 0x31, 0x6c,
	0xbb, 0x81, 0xef, 0x64, 0x19, 0x17, 0x79, 0xd7, 0xdd, 0xc0, 0x1f, 0xc4, 0x41, 0x94, 0x51, 0x24,
	0x9d, 0xe4, 0xd4, 0x56, 0x4e, 0x91, 0x74, 0xc2, 0xa9, 0x7d, 0x10, 0x49, 0x98, 0x29, 0xf0, 0x98,
	0x91, 0x59, 0x74, 0x7f, 0x3f, 0x92, 0xf8, 0x8f, 0x47, 0x7a, 0x0d, 0x62, 0xca, 0x08, 0x9b, 0xa7,
	0x72, 0xbd, 0x8d, 0xd4, 0xfb, 0x47, 0xea, 0xad, 0xe9, 0xf2, 0x6b, 0x5a, 0x7c, 0xde, 0x2c, 0xf6,
	0xca, 0x99, 0x6e, 0x97, 0x33, 0x3d, 0x7c, 0x0f, 0xcd, 0xd2, 0x3c, 0x7e, 0x0a, 0xf2, 0xd0, 0x3c,
	0xd1, 0x4d, 0xc7, 0xb2, 0x7b, 0xf6, 0x85, 0xe5, 0x5c, 0x9c, 0x5b, 0x23, 0x7d, 0x60, 0xbc, 0x31,
	0xf4, 0x13, 0xa9, 0x82, 0x77, 0xe1, 0x41, 0xce, 0xda, 0x1f, 0x46, 0xba, 0x33, 0x1c, 0xe9, 0xe7,
	0x12, 0xc2, 0x7b, 0x20, 0x95, 0xc0, 0xc1, 0xe9, 0xd0, 0xd2, 0x25, 0xe1, 0xd0, 0x84, 0x06, 0xd7,
	0xb5, 0x17, 0x33, 0x8a, 0x5b, 0xb0, 0x5f, 0x1a, 0xd9, 0xd4, 0xdc, 0x5c, 0x3f, 0x35, 0xce, 0x0c,
	0x5b, 0x42, 0x7f, 0x7c, 0xc9, 0xb2, 0x87, 0x23, 0x49, 0xe8, 0xbf, 0xfd, 0xba, 0x54, 0xd0, 0xcd,
	0x52, 0x41, 0x3f, 0x96, 0x0a, 0xfa, 0xb2, 0x52, 0x2a, 0x37, 0x2b, 0xa5, 0xf2, 0x7d, 0xa5, 0x54,
	0x3e, 0x6a, 0xe3, 0x80, 0x5d, 0xce, 0x5d, 0xcd, 0x8b, 0xc3, 0xee, 0x46, 0x34, 0xc5, 0x9f, 0xda,
	0xbd, 0x5a, 0x17, 0x6c, 0x31, 0xa3, 0xa9, 0x2b, 0x72, 0xfe, 0xe5, 0xcf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x20, 0x2e, 0xca, 0x24, 0xd0, 0x03, 0x00, 0x00,
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrTime != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.CrTime))
		i--
		dAtA[i] = 0x28
	}
	if m.ExchangeRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeRate))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.CoinB) > 0 {
		i -= len(m.CoinB)
		copy(dAtA[i:], m.CoinB)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.CoinB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoinA) > 0 {
		i -= len(m.CoinA)
		copy(dAtA[i:], m.CoinA)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.CoinA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrTime != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.CrTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Balance) > 0 {
		for k := range m.Balance {
			v := m.Balance[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMarket(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMarket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrTime != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.CrTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.ExchangeRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeRate))))
		i--
		dAtA[i] = 0x31
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.AskCoin) > 0 {
		i -= len(m.AskCoin)
		copy(dAtA[i:], m.AskCoin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.AskCoin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BidCoin) > 0 {
		i -= len(m.BidCoin)
		copy(dAtA[i:], m.BidCoin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.BidCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.CoinA)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.CoinB)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.ExchangeRate != 0 {
		n += 9
	}
	if m.CrTime != 0 {
		n += 1 + sovMarket(uint64(m.CrTime))
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.Balance) > 0 {
		for k, v := range m.Balance {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMarket(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMarket(uint64(mapEntrySize))
		}
	}
	if m.CrTime != 0 {
		n += 1 + sovMarket(uint64(m.CrTime))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.BidCoin)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.AskCoin)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.ExchangeRate != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	if m.CrTime != 0 {
		n += 1 + sovMarket(uint64(m.CrTime))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeRate = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrTime", wireType)
			}
			m.CrTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMarket
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMarket
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMarket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMarket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Balance[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrTime", wireType)
			}
			m.CrTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AskCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeRate = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrTime", wireType)
			}
			m.CrTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
